apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: rhtr-dns-ut 
spec:
  workspaces:
  - name: ansible-playbooks
    description: |
      This workspace will contain ansible playbooks
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the repo's README.md file to be read.
  tasks:
     - name: create-id
       taskRef:
         name: create-id
     - name: create-ns
       taskRef:
         name: openshift-client 
       params:
         - name: ARGS
           value:
             - new-project
             - cnv-tekton-$(tasks.create-id.results.pipeline-id)
       runAfter:
         - create-id
     - name: grant-perms
       taskRef:
         name: openshift-client
       params:
         - name: ARGS
           value:
             - create
             - rolebinding
             - cnv-tekton
             - --clusterrole=admin
             - --serviceaccount=cnv-tekton:pipeline-sa
             - -n cnv-tekton-$(tasks.create-id.results.pipeline-id)
       runAfter:
         - create-ns 
     - name: get-playbooks
       taskRef: 
         name: git-clone
       workspaces:
       - name: output
         workspace: ansible-playbooks
       params:
       - name: url
         value: https://github.com/tylerauerbeck/rhtr-2020-infra-cicd
       - name: revision
         value: "main"
       - name: deleteExisting
         value: "true"
     - name: fetch-repo
       taskRef:
         name: git-clone
       workspaces:
       - name: output
         workspace: shared-data
       params:
       - name: url
         value: https://github.com/redhat-cop/infra-ansible
       - name: revision
         value: "v1.0.20"
       - name: deleteExisting
         value: "true"
     - name: lint-dns
       workspaces:
       - name: output
         workspace: shared-data
       taskRef:
         name: ansible-lint
       params:
         - name: SKIP_LIST
           value: "106,206,208,301,303,305"
         - name: ARGS
           value: ["$(workspaces.output.path)/roles/dns/config-dns-server-bind/"]
       runAfter:
         - fetch-repo
     - name: create-vmi
       taskRef:
         name: openshift-client
       params:
         - name: ARGS
           value: ["apply","-f","https://raw.githubusercontent.com/tylerauerbeck/rhtr-2020-infra-cicd/main/cnv/fedora32.yaml","-n","cnv-tekton-$(tasks.create-id.results.pipeline-id)"]
       runAfter:
         - grant-perms
         - lint-dns
# Just directly creating a service instead of using `virtctl expose` because for some reason it wants to inject a newline in the namespace
#     - name: expose-vmi-ssh
#       taskRef:
#         name: virtctl
#       params:
#         - name: ARGS
#           value: ["expose","vmi","vmi-fedora-1","--name=vmi-fedora","--port=22","-n","cnv-tekton-$(tasks.create-id.results.pipeline-id)"] 
#       runAfter:
#         - create-vmi
     - name: expose-vmi-ssh
       taskRef: 
         name: openshift-client
       params:
         - name: ARGS
           value:
             - create
             - service
             - clusterip
             - vmi-fedora
             - --tcp=22
             - -n cnv-tekton-$(tasks.create-id.results.pipeline-id)
       runAfter:
         - create-vmi
# This is cheating. We're just outright waiting for 5 minutes to give the VM time to stand up
     - name: wait-for-vm
       taskRef:
         name: sleep
       params:
         - name: sleepSeconds
           value: "300"
       runAfter:
         - create-vmi
     - name: run-ansible
       workspaces:
         - name: playbooks
           workspace: ansible-playbooks
       taskSpec:
         workspaces:
           - name: playbooks
             description: place that holds the playbooks
         steps:
           - name: requirements
             image: docker.io/ansible/ansible-runner
             script: |
               #!/bin/bash
               set -e
               if [ -f requirements.yml ];
               then
                 ansible-galaxy install -r $(workspaces.playbooks.path)/ansible/requirements.yml -p $(workspaces.playbooks.path)/ansible/roles
               fi
           - name: list-pvc
             image: docker.io/ansible/ansible-runner
             script: |
               #!/bin/bash
               ls $(workspaces.playbooks.path)
               ls $(workspaces.playbooks.path)/ansible
           - name: run-playbook
             image: docker.io/ansible/ansible-runner
             command: ['ansible-playbook']
             args:
               - -i 
               - $(workspaces.playbooks.path)/ansible/inventory
               - $(workspaces.playbooks.path)/ansible/playbook.yml
               - -e 
               - 'host_name=vmi-fedora.$(cnv-tekton-$(tasks.create-id.results.pipeline-id)).svc.local'
       runAfter:
         - wait-for-vm
         - get-playbooks
